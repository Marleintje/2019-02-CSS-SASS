/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* universal reset */
*
*::after,
*::before{ 
    margin: 0;
    padding: 0;
    /* box-sizing property is usually not inhereted, but you can force an inherit (take it out of the body) */
    box-sizing: inherit;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 3rem;
    box-sizing: border-box
}

html {
    /* You want this root font size to depend on the font-size given by the browser, so that user can change this setting */
    /* Default browser font-size is 16px, so 10/16 = 0.625 */
    font-size: 62.5%;
}

.header {
    height: 95vh;
    background-image: linear-gradient(
        to right bottom,
        rgba(126, 213, 111, 0.8),
        rgba(40, 180, 131, 0.8)),
    url(../img/hero.jpg);
    background-size: cover;
    background-position: top;
    /* relative position is necessary for absolute position of .logo-box class */
    position: relative;

    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* Toegevoegd in Building a complex Animated button. 
    De button is een <a>, gedraagt zich als text, dus om die te centreren heeft moederelement deze text-align center */
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;
    /* Voorkomt eventueel gek bibberen van animation. Niemand weet waarom echt nodig */
    backface-visibility: hidden;
    margin-bottom: 6rem;
}

.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation: moveInLeft 1s ease-out;
    /* Je kan t ook uitschrijven voor meer details, e.g:
    animation-name: moveInLeft;
    animation-duration: 1s;
    animition-delay: 3s;
    animition-iteration-count: 3;
    animation-timing-function: ease-out;
    */
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }

    80% {
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(3rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

.btn:link,
.btn:visited {
    text-transform: uppercase;   
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* btn is gewoon text dus om goed te positioneren is inline-block nodig */
    display: inline-block;
    border-radius: 10rem;
    /* All properties are enabled to be animated. i.e. hover & active are smooth movements. Animations are always on the initial 'link' state */    
    transition: all .2s;
    /* Deze relative is nodig voor positionering van de btn::after */
    position: relative;
    font-size: 1.6rem;
}

.btn:hover {
    transform: translateY(-.3rem);
    /* X-direction, Y-direction, blur, opacity */
    box-shadow: 0 1rem 2rem rgba(0,0,0,.2);
}

.btn:active{
    /* Note that it's -.1rem related to the initial 'link' state */
    transform: translateY(-.1rem);
    box-shadow: 0 .5rem 1rem rgba(0,0,0,.2);
}

.btn--white {
    background-color: #fff;
    color: #777;
}

.btn::after {
    /* before/after pseudo element needs the content property, otherwise it won't display */
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* The reference of this position: absolute is the first relative position that it can find */
    position: absolute;
    top: 0;
    left: 0;
    /* defines position of an element when it has the same position as another element */
    z-index: -1;
    transition: all .4s;
}

.btn--white::after {
    background-color: #fff;
}

.btn:hover::after{
    /* scale(2) = double the size */
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn--animated{
    animation: moveInBottom .5s ease-out .75s;
    /* it automatically applies the styles of the 0% before the animation starts (anders staat die button er al in t begin) */
    animation-fill-mode: backwards;
}